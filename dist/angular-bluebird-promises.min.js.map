{"version":3,"sources":["angular-bluebird-promises.js"],"names":[],"mappings":"CAAA,SAAA,EAAA,GAEE,YAEA,GACE,OAAA,mBACA,SAAA,WAAA,EAAA,cACA,QAAQ,WAAA,WAAA,SAAA,EAAA,GAKN,EAAA,MAAA,WACE,GAAA,GAAA,EAAA,SAIA,OAHA,GAAA,QAAA,EAAA,KAAA,EAAA,EAAA,SACA,EAAA,OAAA,EAAA,KAAA,EAAA,EAAA,QACA,EAAA,OAAA,EAAA,KAAA,EAAA,EAAA,UACA,GAGF,EAAA,OAAA,EAAA,SACA,EAAA,KAAA,EAAA,IAEA,IAAA,GAAA,EAAA,GACA,GAAA,IAAA,SAAA,GAEE,GAAA,EAAA,SAAA,KAAA,EAAA,QAAA,GAAA,CAEE,GAAA,MAAA,IAQA,OAPA,GAAA,QAAA,EAAA,SAAA,EAAA,GAEE,EAAA,KAAA,GACA,EAAA,KAAA,KAIF,EAAA,GAAA,KAAA,SAAA,GAEE,GAAA,KAIA,OAHA,GAAA,QAAA,EAAA,SAAA,EAAA,GACE,EAAA,EAAA,IAAA,IAEF,IAKF,MAAA,GAAA,IAKJ,EAAA,6BAAA,EAAA,MAEA,EAAA,UAAA,KAAsB,WACpB,MAAA,QAGH,KAAM,aAAA,WAAA,SAAA,EAAA,GAEL,EAAA,aAAA,SAAA,GACE,EAAA,WAAA,SAKR,QAAA","file":"angular-bluebird-promises.min.js","sourcesContent":["(function(angular, Promise) {\n\n  'use strict';\n\n  angular\n    .module('mwl.bluebird', [])\n    .constant('Bluebird', Promise.noConflict())\n    .config(function($provide, Bluebird) {\n\n      //Make bluebird API compatible with angular's subset of $q\n      //Adapted from: https://gist.github.com/petkaantonov/8363789\n\n      Bluebird.defer = function() {\n        var b = Bluebird.pending();\n        b.resolve = angular.bind(b, b.fulfill);\n        b.reject = angular.bind(b, b.reject);\n        b.notify = angular.bind(b, b.progress);\n        return b;\n      };\n\n      Bluebird.reject = Bluebird.rejected;\n      Bluebird.when = Bluebird.cast;\n\n      var originalAll = Bluebird.all;\n      Bluebird.all = function(promises) {\n\n        if (angular.isObject(promises) && !angular.isArray(promises)) {\n\n          var promiseArray = [], promiseKeysArray = [];\n          angular.forEach(promises, function(promise, key) {\n\n            promiseKeysArray.push(key);\n            promiseArray.push(promise);\n\n          });\n\n          return originalAll(promiseArray).then(function(results) {\n\n            var objectResult = {};\n            angular.forEach(results, function(result, index) {\n              objectResult[promiseKeysArray[index]] = result;\n            });\n            return objectResult;\n\n          });\n\n        } else {\n          return originalAll(promises);\n        }\n\n      };\n\n      Bluebird.onPossiblyUnhandledRejection(angular.noop);\n\n      $provide.decorator('$q', function() {\n        return Bluebird;\n      });\n\n    }).run(function($rootScope, Bluebird) {\n\n      Bluebird.setScheduler(function(cb) {\n        $rootScope.$evalAsync(cb);\n      });\n\n    });\n\n})(angular, Promise);\n"],"sourceRoot":"/source/"}